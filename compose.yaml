# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
      target: final
      dockerfile: Dockerfile
    container_name: server
    ports:
      - 8080:80
    links:
      - postgres
    entrypoint: ["dotnet", "IntentAPI.dll"]
    environment:
      - ASPNETCORE_ENVIRONMENT=Development # Production
      - ASPNETCORE_HTTP_PORTS=80;8080;
      - ASPNETCORE_HTTPS_PORTS=443;8081;
      - GOOGLE_APPLICATION_CREDENTIALS=service-account-file.json
    # - ASPNETCORE_URLS=http://+:80/;https://*:443/
    # - ASPNETCORE_URLS=https://+:8081;http://+:8080
    volumes:
      - .:/code
    env_file:
      - ./.env

  # The commented out section below is an example of how to define a PostgreSQL
  # database that your application can use. `depends_on` tells Docker Compose to
  # start the database before your application. The `db-data` volume persists the
  # database data between container restarts. The `db-password` secret is used
  # to set the database password. You must create `db/password.txt` and add
  # a password of your choosing to it before running `docker compose up`.
  #     depends_on:
  #       db:
  #         condition: service_healthy
  #   db:
  #     image: postgres
  #     restart: always
  #     user: postgres
  #     secrets:
  #       - db-password
  #     volumes:
  #       - db-data:/var/lib/postgresql/data
  #     environment:
  #       - POSTGRES_DB=example
  #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
  #     expose:
  #       - 5432
  #     healthcheck:
  #       test: [ "CMD", "pg_isready" ]
  #       interval: 10s
  #       timeout: 5s
  #       retries: 5
  # volumes:
  #   db-data:
  # secrets:
  #   db-password:
  #     file: db/password.txt
  postgres:
    container_name: postgres
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PW}
      - POSTGRES_DB=${POSTGRES_DB} #optional (specify default database instead of $POSTGRES_DB)
    ports:
      - "5432:5432"
    restart: always

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_MAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PW}
    ports:
      - "5050:80"
    restart: always
